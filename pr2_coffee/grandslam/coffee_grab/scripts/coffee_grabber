#!/usr/bin/python

import roslib
roslib.load_manifest('coffee_grab')
import rospy
import actionlib
import math
import sys, os

from geometry_msgs.msg import *
import tf
from sensor_msgs.msg import *
from robotpass.msg import *
from grandslam.msg import *
from pr2_common_action_msgs.msg import *

class CoffeeGrab(object):
    def __init__(self):
        self.base_scan_msg = False
        self.listener = tf.TransformListener(True, rospy.Duration(100))
        self.cmd_vel_publisher = rospy.Publisher('/base_controller/command', Twist)
        rospy.loginfo("Wait for object pass")
        self.robotpass = actionlib.SimpleActionClient("pass_object", PassObjectAction)
        self.robotpass.wait_for_server()
        rospy.loginfo("Wait for tuck arm")
        self.tuck = actionlib.SimpleActionClient("tuck_arms", TuckArmsAction)
        self.tuck.wait_for_server()
        rospy.loginfo("Wait for grandslam")
        self.grandslam_ac = actionlib.SimpleActionClient("grandslam/move", GrandSlamAction)
        self.grandslam_ac.wait_for_server()
        rospy.Subscriber("/base_scan", LaserScan, self.on_base_scan)

    def on_base_scan(self, msg):
        self.base_scan_msg = msg

    def scan_to_points(self, msg):
        xy = []
        angle = msg.angle_min
        for r in range(0, len(msg.ranges)):
            dist = msg.ranges[r]
            xy.append([dist * math.cos(angle), dist * math.sin(angle)])
            angle = angle + msg.angle_increment
        return xy

    def tuck_arms(self, left, right):
        tuck_goal = TuckArmsGoal()
        tuck_goal.tuck_left = left
        tuck_goal.tuck_right = right
        self.tuck.send_goal(tuck_goal)
        self.tuck.wait_for_result()

    def passobject(self, direction, position, obj):
        take_goal = PassObjectGoal()
        take_goal.arm = PassObjectGoal.LEFT_ARM
        take_goal.direction = direction
        take_goal.arm_position = position
        take_goal.object_name = obj
        self.robotpass.send_goal(take_goal)
        self.robotpass.wait_for_result()

    def grandslam(self, x, y, a, name):
        goal = GrandSlamGoal()
        goal.target_pose.header.stamp = rospy.get_rostime()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.pose.position.x = x
        goal.target_pose.pose.position.y = y
        
        #FIXME
        goal.target_pose.pose.orientation.w = 1.0
        goal.goal_map = name
        self.grandslam_ac.send_goal(goal)
        self.grandslam_ac.wait_for_result()

    
    def temstart(self):
        #Start out with the money bag
        self.tuck_arms(False, True)
        self.passobject(PassObjectGoal.TAKE_OBJECT, PassObjectGoal.HIGH, "empty bag")
        self.tuck_arms(True, True)

        #Go to Ken's office - grandslam
        print "GRANDSLAM: ken's office"
        self.grandslam(17.460, 38.323, -2.330, "clarkcenterfirstfloor")

        self.tuck_arms(False, True)
        self.passobject(PassObjectGoal.GIVE_OBJECT, PassObjectGoal.HIGH, "empty bag")
        self.passobject(PassObjectGoal.TAKE_OBJECT, PassObjectGoal.HIGH, "money and paper instructions")
        self.tuck_arms(True, True)

    def start(self):
        
        #Go to target - grandslam
        print "GRANDSLAM: coffee shop"
        self.grandslam(56.869, 14.529, 2.511, "clarkcenterpeetscoffee")
        
        #In the coffee shop - drive a course to wait in line
        print "Coffee course"
        self.move_to_target(58.834, 13.630, -0.697, True)
        self.move_to_target(58.782, 13.704, 2.412, True)
        self.move_to_target(57.840, 14.623, 2.497, True)
        self.move_to_target(57.667, 15.643, 1.731, True)
        self.move_to_target(57.476, 16.429, 1.731, True)
        self.move_to_target(59.489, 19.104, 0.906, True)
        self.move_to_target(59.489, 19.104, -0.687, False)

        #Give item to checker
        #self.tuck_arms(False, True)
        #self.passobject(PassObjectGoal.GIVE_OBJECT, PassObjectGoal.HIGH, "money and paper instructions")
        #self.tuck_arms(False, True)

        #Move to target
        print "Move to target"
        #self.move_to_target(59.730, 19.019, -0.687, False)

        #Untuck
        self.tuck_arms(False, True)
        self.passobject(PassObjectGoal.GIVE_OBJECT, PassObjectGoal.HIGH, "money and paper instructions")
        self.passobject(PassObjectGoal.TAKE_OBJECT, PassObjectGoal.HIGH, "cup")
        self.passobject(PassObjectGoal.STASH_OBJECT, PassObjectGoal.HIGH, "cup")
        self.tuck_arms(True, True)
        
        #Return to ken's office
        print "GRANDSLAM: ken's office"
        self.grandslam(17.460, 38.323, -2.330, "clarkcenterfirstfloor")

        #Untuck
        self.tuck_arms(False, True)
        self.passobject(PassObjectGoal.UNSTASH_OBJECT, PassObjectGoal.HIGH, "cup")
        self.passobject(PassObjectGoal.GIVE_OBJECT, PassObjectGoal.HIGH, "cup")
        self.tuck_arms(True, True)

        print "GRANDSLAM: base"


    def move_to_target(self, g_x, g_y, g_a, watch_scans=False):
        base_frame = "/base_footprint" #FIXME: param
        map_frame = "/map"
        
        while not rospy.is_shutdown():
            try:
                self.listener.waitForTransform(base_frame, map_frame,
                                               rospy.Time(), rospy.Duration(30))
                
                goal = PoseStamped()
                goal.header.frame_id = map_frame
                goal.pose.position.x = g_x
                goal.pose.position.y = g_y
                quat = tf.transformations.quaternion_from_euler(0, 0, g_a)
                goal.pose.orientation.x = quat[0]
                goal.pose.orientation.y = quat[1]
                goal.pose.orientation.z = quat[2]
                goal.pose.orientation.w = quat[3]
                goal = self.listener.transformPose(map_frame, goal)
                print goal
                break
            except (tf.LookupException, tf.ConnectivityException,
                    tf.ExtrapolationException) as ex:
                rospy.logwarn("TF error") #FIXME: warning
        

        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            try:
                goal_transformed = self.listener.transformPose(base_frame, goal)
                
                #print goal_transformed
                
                def scaleclamp(val, scale, lim, min_v = 0):
                    t = val * scale
                    if (t > lim):
                        return lim
                    if (t < -lim):
                        return -lim
                    if (t < min_v and t > -min_v):
                        if (t < 0):
                            t = -min_v
                        if (t > 0):
                            t = min_v
                    return t
                
                msg = Twist()
                p, r, y = tf.transformations.euler_from_quaternion(
                    (goal_transformed.pose.orientation.x,
                     goal_transformed.pose.orientation.y,
                     goal_transformed.pose.orientation.z,
                     goal_transformed.pose.orientation.w))
                msg.angular.x = 0
                msg.angular.y = 0
                msg.linear.x = 0
                msg.linear.y = 0
                if (y < -0.01 or y > 0.01):
                    msg.angular.z = scaleclamp(y, 1, 0.5, 0.005)
                if (y > -0.1 and y < 0.1):
                    dist = goal_transformed.pose.position.y \
                        * goal_transformed.pose.position.y
                    dist = dist + goal_transformed.pose.position.x \
                        * goal_transformed.pose.position.x
                    dist = math.sqrt(dist)

                
                    if (dist < 0.03 and msg.angular.z == 0.0):
                        break

                    dist = scaleclamp(dist, 1.0, 0.3)
                    ang = math.atan2(goal_transformed.pose.position.y,
                                     goal_transformed.pose.position.x)
                    msg.linear.x = dist * math.cos(ang)
                    msg.linear.y = dist * math.sin(ang)
                    
                    if (watch_scans != False):
                        while not rospy.is_shutdown() and not self.base_scan_msg:
                            rospy.sleep(0.001)
                        if (self.base_scan_msg == False):
                            return False
                        pts = self.scan_to_points(self.base_scan_msg)
                        blocked = False
                        if (msg.linear.y < -0.2):
                            for i in pts:
                                if (i[0] < 0.00 and i[0] > -0.50 \
                                        and i[1] > -0.80 and i[1] < -0.30):
                                    blocked = True
                        if (msg.linear.y > 0.2):
                            for i in pts:
                                if (i[0] < 0.00 and i[0] > -0.50 \
                                        and i[1] < 0.80 and i[1] > 0.30):
                                    blocked = True
                        if (msg.linear.x > 0.1):
                            for i in pts:
                                if (i[0] < 0.50 and i[0] > 0.00 \
                                        and i[1] < 0.25 and i[1] > -0.25):
                                    blocked = True

                        if (blocked):
                            msg.linear.x = 0
                            msg.linear.y = 0

                self.cmd_vel_publisher.publish(msg)
                
                rate.sleep()
            except (tf.LookupException, tf.ConnectivityException,
                    tf.ExtrapolationException) as ex:
                rospy.logwarn("TF error") #FIXME
        return True
        

##################
if __name__ == '__main__':
    rospy.init_node('coffee_grabber')
    server = CoffeeGrab()
    server.start()
    rospy.spin()









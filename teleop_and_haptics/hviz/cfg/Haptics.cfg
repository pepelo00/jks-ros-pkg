#! /usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

PACKAGE='hviz'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

## Sample constants
#gen.const("int_const", int_t, 5, "An int constant.")
#gen.const("Init_Threshold", double_t, 75, "Initializer for threshold.") # reference this in code by gradient_object_detector::Test_Init_Threshold
#gen.const("str_const", str_t, "foo", "A string constant.")
#gen.const("bool_const", bool_t, True, "A bool constant.")

############################################################################
## Constants for referencing variables in code.
## Can reference them by <package-name>::<cfg-file-name>_<const-name>, e.g. bp_dynamic_reconfigure::Sample_id_variable_a

'''
id_pos_error = 1;
id_alignment_error = 2;
id_points_enclosed = 3;
id_collisions = 4;
id_linear_step = 5;
id_roll_step = 6;
id_voxel_size = 7;

gen.const("id_pos_error",           int_t,  id_pos_error,       "Constant reference IDs")
gen.const("id_alignment_error",     int_t,  id_alignment_error, "Constant reference IDs")
gen.const("id_points_enclosed",     int_t,  id_points_enclosed, "Constant reference IDs")
gen.const("id_collisions",          int_t,  id_collisions,      "Constant reference IDs")
gen.const("id_linear_step",          int_t,  id_linear_step,      "Constant reference IDs")
gen.const("id_roll_step",          int_t,  id_roll_step,      "Constant reference IDs")
gen.const("id_voxel_size",          int_t,  id_voxel_size,      "Constant reference IDs")
'''



#############################################################################

# This generates an enumerated list, handy for dropdown menus.
objectEnum = gen.enum([
                      gen.const(  "POINTS",   int_t, 0, "A few points." ),
                      gen.const(  "PLANE",    int_t, 1, "A simple plane shape." ),
                      gen.const(  "SHELL",    int_t, 2, "A spherical shell segment."    ),
                      gen.const(  "BOX",      int_t, 3, "A open-top box."   ),
                      gen.const(  "GRADIENT", int_t, 4, "A non-uniform plane."   ),
                      gen.const(  "CLOUD",    int_t, 5, "Receives a cloud from a subscribed topic."   )
                    ], "For selecting the active object.")

modeEnum = gen.enum([
                      gen.const(  "METABALLS",  int_t, 0, "Render as metaballs." ),
                      gen.const(  "SURFELS_CLOSED",    int_t, 1, "Render as surfels (1-way)."    ),
                      gen.const(  "SURFELS_OPEN",    int_t, 2, "Render as surfels (2-way)."    )
                    ], "For selecting the cloud rendering type.")

basisEnum = gen.enum([
                      gen.const(  "WYVILL",     int_t, 0, "Use Wyvills soft-objects function." ),
                      gen.const(  "WENDLAND",   int_t, 1, "Use Wendlands function."     )
                      ], "For setting the basis function.")


#############################################################################
## gen.add() actually adds things to the reconfigure GUI.
##       GUI/cpp name    var type  level    ?description?                    init    min   max   make dropdown...?
gen.add( "object_select",   int_t,      1,  "What object to render",          0,      0,    5,    edit_method = objectEnum)
gen.add( "cloud_mode",      int_t,      2,  "Render as metaballs or surfels", 0,      0,    1,    edit_method = modeEnum)
gen.add( "basis_function",  int_t,      3,  "Radial weight function to use",  0,      0,    1,    edit_method = basisEnum)
gen.add( "synthetic_noise", double_t,   4,  "noise to use for synthetic data",   0.01,  0,  0.1)
gen.add( "tree_resolution",     double_t,   26,  "resolution for octree",           0.005, 0.0005, 0.03)
gen.add( "auto_threshold",  bool_t,     10,  "Automatically compute meta_R and meta_thresh", True)
gen.add( "basis_radius",    double_t,   11,  "Support radius of weighting function.",    0.01,      0,    0.2 )
gen.add( "radius_multiple", double_t,   12,  "Multiple of spacing to use for auto-weighting.",    3,      0,    20 )
gen.add( "meta_thresh",     double_t,   13,  "The metaball threshold", 0.5,      0,    10 )
gen.add( "dynamic_friction",double_t,   20,  "the coefficient of dynamic friction",   0.2,  0,  1)
gen.add( "scaleZ",          double_t,   21,  "scaling along the normal direction for metaballs",   1,  0.1,  10)
gen.add( "tool_radius",     double_t,   24,  "radius of the HIP",           0.01, 0.001, 0.04)
#gen.add( "mean_shift",      bool_t,    22,  "Shift the cloud to have zero mean centroid", False)
gen.add( "publish_cloud",   bool_t,     23,  "Whether to publish the cloud.", True)
#gen.add( "estimate_normals",   bool_t,     23,  "Whether to estimate normals.", True)
gen.add( "num_clouds",   int_t,      25,  "number of clouds to keep in list",           2, 2, 5)
gen.add( "haptics_sleep",   int_t,      25,  "sleep in us after each haptic cycle",           200, 0, 1000)

gen.add( "light_angle",     double_t,   26,  "angle of light source",           30, -180, 180)




#Status string
gen.add( "status", str_t, 99, "For returning text to reconfigure gui.", "status")


## For reference
#gen.add( "level",    int_t,      1,  "Contains the level of the previous change",0)
#gen.add( "var_int",  int_t,      2,  "Int parameter",      0,    -10,  10)
#gen.add( "var_str",  str_t,      4,  "String parameter",   "foo")
#gen.add( "flag",     bool_t,     8,  "Take slow steps",      False)

##                          <package-name>           <cfg-file-name>
exit(gen.generate(PACKAGE, "hviz", "Haptics"))




